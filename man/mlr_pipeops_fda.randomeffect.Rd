% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PipeOpFDARandomEffect.R
\name{mlr_pipeops_fda.randomeffect}
\alias{mlr_pipeops_fda.randomeffect}
\alias{PipeOpFDARandomEffect}
\title{Extracts Random Effects from Functional Columns}
\description{
This is the class that extracts random effects, specifically random intercepts and
random slopes, from functional columns. Random effects are computed via the lme4::lmer() function
which fits a linear mixed models and subsequently enables random effects prediction.
Outcome of the mixed model are the values of functional feature which depend on the functional arguments with
id as the grouping structure.
}
\section{Parameters}{

The parameters are the parameters inherited from \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{PipeOpTaskPreprocSimple}},
as well as the following parameters:
\itemize{
\item \code{drop} :: \code{logical(1)}\cr
Whether to drop the original \code{functional} features and only keep the extracted random effects.
Note that this does not remove the features from the backend, but only from the active
column role \code{feature}. Initial value is \code{TRUE}.
\code{left} :: \code{numeric()}\cr
The left boundary of the window. Initial is \code{-Inf}.
The window is specified such that the all values >=left and <=right are kept for the computations.
\item \code{right} :: \code{numeric()}\cr
The right boundary of the window. Initial is \code{Inf}.
}

@section Naming:
The new names generally append a \verb{_random_intercept}/\verb{_random_slope} to the corresponding column name.
@export
@examples
task = tsk("fuel")
po_fre = po("fda.randomeffect")
task_fre = po_fre$train(list(task))[\link{1L}]
}

\section{Super classes}{
\code{\link[mlr3pipelines:PipeOp]{mlr3pipelines::PipeOp}} -> \code{\link[mlr3pipelines:PipeOpTaskPreproc]{mlr3pipelines::PipeOpTaskPreproc}} -> \code{\link[mlr3pipelines:PipeOpTaskPreprocSimple]{mlr3pipelines::PipeOpTaskPreprocSimple}} -> \code{PipeOpFDARandomEffect}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-PipeOpFDARandomEffect-new}{\code{PipeOpFDARandomEffect$new()}}
\item \href{#method-PipeOpFDARandomEffect-clone}{\code{PipeOpFDARandomEffect$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="help"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-help'><code>mlr3pipelines::PipeOp$help()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="predict"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-predict'><code>mlr3pipelines::PipeOp$predict()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="print"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-print'><code>mlr3pipelines::PipeOp$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="mlr3pipelines" data-topic="PipeOp" data-id="train"><a href='../../mlr3pipelines/html/PipeOp.html#method-PipeOp-train'><code>mlr3pipelines::PipeOp$train()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFDARandomEffect-new"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFDARandomEffect-new}{}}}
\subsection{Method \code{new()}}{
Initializes a new instance of this Class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFDARandomEffect$new(id = "fda.randomeffect", param_vals = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)}) Identifier of the operator, default is \code{"fda.randomeffect"}.}

\item{\code{param_vals}}{(named \code{list()}) List of hyperparameter settings, overwriting
default settings set during construction.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-PipeOpFDARandomEffect-clone"></a>}}
\if{latex}{\out{\hypertarget{method-PipeOpFDARandomEffect-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{PipeOpFDARandomEffect$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
